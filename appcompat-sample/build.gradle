apply plugin: 'com.android.application'
apply from: rootProject.getRootDir().getAbsolutePath() + File.separator + 'common.gradle'

apply plugin: 'com.jakewharton.butterknife'

android {
    defaultConfig {
        applicationId "com.hyh.prettyskin.demo.support"
        versionCode 100
        versionName "1.0.0"
    }

    signingConfigs {
        release {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../debug.keystore')
            storePassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.appcompat
    implementation rootProject.ext.supportAnnotations
    implementation rootProject.ext.recyclerview
    implementation rootProject.ext.design
    implementation rootProject.ext.constraint

    implementation rootProject.ext.okhttp
    implementation rootProject.ext.okio
    implementation rootProject.ext.retrofit
    implementation rootProject.ext.gson
    implementation rootProject.ext.gsonconverter

    implementation 'com.jakewharton:butterknife:9.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0'


    implementation project(':lib-core')
    //implementation 'com.hyh.prettyskin:prettyskin-core:1.0.0'

    implementation project(':sample-common')
    implementation project(':lib-android-appcompat')

    implementation('com.github.bumptech.glide:glide:4.9.0') {
        exclude group: "com.android.support"
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
}


apply plugin: 'AndResGuard'
andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
    fixedResName = "arg"
    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
    mergeDuplicatedRes = true
    whiteList = [

    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.17'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果不设置则会默认覆盖assemble输出的apk
     **/
    finalApkBackupPath = "${project.buildDir}/appcompat-sample-andresguard.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA-1”
     **/
    // digestalg = "SHA-256"
}